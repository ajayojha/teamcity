package com.zerothreatai.teamcity;

import com.zerothreatai.teamcity.CONST.BuildParams;
import com.zerothreatai.teamcity.CONST.RunnerInfo;
import jetbrains.buildServer.serverSide.*;
import jetbrains.buildServer.web.openapi.PluginDescriptor;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.util.*;

import static jetbrains.buildServer.util.PropertiesUtil.isEmptyOrNull;

public class VulnerabilityScanRunner extends RunType {

    private final PluginDescriptor pluginDescriptor;

    public VulnerabilityScanRunner(RunTypeRegistry registry, PluginDescriptor pluginDescriptor) {
        this.pluginDescriptor = pluginDescriptor;
        registry.registerRunType(this);
    }

    @NotNull
    @Override
    public String getType() {
        return RunnerInfo.RUNNER_TYPE;
    }

    @NotNull
    @Override
    public String getDisplayName() {
        return RunnerInfo.DISPLAY_RUNNER_NAME;
    }

    @NotNull
    @Override
    public String getDescription() {
        return RunnerInfo.RUNNER_DESCRIPTION;
    }

    @Nullable
    @Override
    public PropertiesProcessor getRunnerPropertiesProcessor() {
        return properties -> {
            if (properties == null) {
                return Collections.emptyList();
            }
            List<InvalidProperty> result = new ArrayList<>();
            if (isEmptyOrNull(properties.get(BuildParams.ZT_TOKEN))) {
                result.add(new InvalidProperty(BuildParams.ZT_TOKEN, BuildParams.ZT_TOKEN_MESSAGE));
            }
            String waitForAnalysis = properties.get(BuildParams.WAIT_FOR_ANALYSIS);
            if (waitForAnalysis != null &&
                    !(Objects.equals(waitForAnalysis, "true") || Objects.equals(waitForAnalysis, "false"))) {
                result.add(new InvalidProperty(BuildParams.WAIT_FOR_ANALYSIS, BuildParams.WAIT_FOR_ANALYSIS_MESSAGE));
            }
            return result;
        };
    }

    @Nullable
    @Override
    public String getEditRunnerParamsJspFilePath() {
        return pluginDescriptor.getPluginResourcesPath("templates/editVulnerabilityScanSettings.jsp");
    }

    @Nullable
    @Override
    public String getViewRunnerParamsJspFilePath() {
        return pluginDescriptor.getPluginResourcesPath("templates/viewVulnerabilityScanSettings.jsp");
    }

    @Nullable
    @Override
    public Map<String, String> getDefaultRunnerProperties() {
        Map<String, String> defaults = new HashMap<>();
        defaults.put(BuildParams.ZT_TOKEN, "");
        defaults.put(BuildParams.WAIT_FOR_ANALYSIS, "false");
        return defaults;
    }

    @NotNull
    @Override
    public String describeParameters(@NotNull Map<String, String> parameters) {
        return "ZT_TOKEN :" + parameters.get(BuildParams.ZT_TOKEN) + "\nWAIT_FOR_ANALYSIS :" + parameters.get(BuildParams.WAIT_FOR_ANALYSIS);
    }
}
