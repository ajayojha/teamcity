package com.zerothreatai.teamcity;

import com.zerothreatai.teamcity.CONST.BuildParams;
import com.zerothreatai.teamcity.models.ScanResponse;
import com.zerothreatai.teamcity.services.ScanService;
import jetbrains.buildServer.RunBuildException;
import jetbrains.buildServer.agent.BuildProgressLogger;
import jetbrains.buildServer.agent.BuildRunnerContext;
import jetbrains.buildServer.agent.runner.BuildServiceAdapter;
import jetbrains.buildServer.agent.runner.ProgramCommandLine;
import jetbrains.buildServer.agent.runner.SimpleProgramCommandLine;
import org.jetbrains.annotations.NotNull;

import java.util.Arrays;
import java.util.Collections;

public class VulnerabilityScanTask extends BuildServiceAdapter {

    @NotNull
    @Override
    public ProgramCommandLine makeProgramCommandLine() throws RunBuildException {
        BuildRunnerContext taskContext = getRunnerContext();
        BuildProgressLogger logger = getLogger();

        // Run the vulnerability scan synchronously
        startVulnerabilityScan(taskContext, logger);

        // Return a dummy command line that immediately succeeds.
        String osName = System.getProperty("os.name").toLowerCase();
        if (osName.contains("win")) {
            return new SimpleProgramCommandLine(taskContext, "cmd.exe", Arrays.asList("/c", "exit", "0"));
        } else {
            return new SimpleProgramCommandLine(taskContext, "/bin/true", Collections.emptyList());
        }
    }

    private void startVulnerabilityScan(BuildRunnerContext context, BuildProgressLogger logger) throws RunBuildException {
        String token = context.getRunnerParameters().get(BuildParams.ZT_TOKEN);
        boolean waitForAnalysis = Boolean.parseBoolean(context.getRunnerParameters().get(BuildParams.WAIT_FOR_ANALYSIS));

        if (token == null || token.trim().isEmpty()) {
            logger.error("Please configure a valid ZT_TOKEN.");
            throw new RunBuildException("Invalid ZT_TOKEN");
        }

        try {
            // Initiate web scan
            logger.message("Initiating security scan request.");
            ScanResponse scanResponse = ScanService.initiateScan(token, logger);
            if (scanResponse.Status != 200) {
                logger.error("Failed to initiate scan. Reason: " + scanResponse.Message);
                throw new RunBuildException("Failed to initiate scan");
            }

            logger.message("Scan started successfully.\nScan Report Url:" + scanResponse.Url);

            // Poll for scan completion
            if (waitForAnalysis) {
                boolean scanCompleted = ScanService.pollScanStatus(scanResponse.Code, logger);
                if (!scanCompleted) {
                    logger.error("Scan did not complete successfully.");
                    throw new RunBuildException("Scan did not complete successfully");
                } else {
                    logger.message("Scan completed successfully.");
                }
            }
        } catch (Exception e) {
            logger.error("Status polling failed: " + e.getMessage());
            throw new RunBuildException("Vulnerability scan task failed: " + e.getMessage(), e);
        }
    }
}